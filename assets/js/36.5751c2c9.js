(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{489:function(_,v,a){"use strict";a.r(v);var r=a(14),t=Object(r.a)({},(function(){var _=this,v=_.$createElement,a=_._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[a("h1",{attrs:{id:"kafka-可靠的数据传递"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kafka-可靠的数据传递"}},[_._v("#")]),_._v(" Kafka 可靠的数据传递")]),_._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E4%B8%80%E5%8F%AF%E9%9D%A0%E6%80%A7%E4%BF%9D%E8%AF%81"}},[_._v("一、可靠性保证")])]),_._v(" "),a("li",[a("a",{attrs:{href:"#%E4%BA%8C%E5%A4%8D%E5%88%B6"}},[_._v("二、复制")])]),_._v(" "),a("li",[a("a",{attrs:{href:"#%E4%B8%89broker-%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7"}},[_._v("三、Broker 的可靠性")]),_._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E5%A4%8D%E5%88%B6%E7%B3%BB%E6%95%B0"}},[_._v("复制系数")])]),_._v(" "),a("li",[a("a",{attrs:{href:"#%E4%B8%8D%E5%AE%8C%E5%85%A8%E7%9A%84%E9%80%89%E4%B8%BB"}},[_._v("不完全的选主")])]),_._v(" "),a("li",[a("a",{attrs:{href:"#%E6%9C%80%E5%B0%91%E5%90%8C%E6%AD%A5%E5%89%AF%E6%9C%AC"}},[_._v("最少同步副本")])])])]),_._v(" "),a("li",[a("a",{attrs:{href:"#%E5%9B%9B%E7%94%9F%E4%BA%A7%E8%80%85%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7"}},[_._v("四、生产者的可靠性")]),_._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#ack"}},[_._v("ACK")])]),_._v(" "),a("li",[a("a",{attrs:{href:"#%E9%87%8D%E8%AF%95"}},[_._v("重试")])]),_._v(" "),a("li",[a("a",{attrs:{href:"#%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86"}},[_._v("错误处理")])])])]),_._v(" "),a("li",[a("a",{attrs:{href:"#%E4%BA%94%E6%B6%88%E8%B4%B9%E8%80%85%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7"}},[_._v("五、消费者的可靠性")]),_._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E6%B6%88%E8%B4%B9%E8%80%85%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E9%85%8D%E7%BD%AE"}},[_._v("消费者的可靠性配置")])]),_._v(" "),a("li",[a("a",{attrs:{href:"#%E6%98%BE%E7%A4%BA%E6%8F%90%E4%BA%A4%E5%81%8F%E7%A7%BB%E9%87%8F"}},[_._v("显示提交偏移量")])])])]),_._v(" "),a("li",[a("a",{attrs:{href:"#%E5%85%AD%E9%AA%8C%E8%AF%81%E7%B3%BB%E7%BB%9F%E5%8F%AF%E9%9D%A0%E6%80%A7"}},[_._v("六、验证系统可靠性")])]),_._v(" "),a("li",[a("a",{attrs:{href:"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99"}},[_._v("参考资料")])])]),_._v(" "),a("h2",{attrs:{id:"一、可靠性保证"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、可靠性保证"}},[_._v("#")]),_._v(" 一、可靠性保证")]),_._v(" "),a("p",[_._v("Kafka 到底在什么情况下才能保证消息不丢失呢？")]),_._v(" "),a("p",[_._v("一句话概括，"),a("strong",[_._v("Kafka 只对“已提交”的消息（committed message）做有限度的持久化保证")]),_._v("。")]),_._v(" "),a("p",[_._v("Kafka 的可靠性保证：")]),_._v(" "),a("ul",[a("li",[_._v("Kafka "),a("strong",[_._v("可以保证分区消息的顺序")]),_._v("。")]),_._v(" "),a("li",[a("strong",[_._v("只有当消息被写入分区的若干同步副本时，才被认为是已提交的")]),_._v("。为什么是若干个 Broker 呢？这取决于你对“已提交”的定义。你可以选择只要 Leader 成功保存该消息就算是已提交，也可以是令所有 Broker 都成功保存该消息才算是已提交。")]),_._v(" "),a("li",[a("strong",[_._v("只要还有一个副本是存活的，那么已提交的消息就不会丢失")]),_._v("。")]),_._v(" "),a("li",[a("strong",[_._v("消费者只能读取已提交的消息")]),_._v("。")])]),_._v(" "),a("h2",{attrs:{id:"二、复制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、复制"}},[_._v("#")]),_._v(" 二、复制")]),_._v(" "),a("p",[_._v("kafka 的复制机制和分区的多副本架构是 kafka 可靠性保证的核心。")]),_._v(" "),a("p",[_._v("Kafka 的主题被分为多个分区，分区时基本的数据块。每个分区可以有多个副本，其中一个是首领。所有事件都直接发送给主副本，或者直接从主副本读取事件。其他副本只需要与首领保持同步，并即时复制最新的事件。当主副本不可用时，其中一个同步副本将成为新的主副本。")]),_._v(" "),a("h2",{attrs:{id:"三、broker-的可靠性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、broker-的可靠性"}},[_._v("#")]),_._v(" 三、Broker 的可靠性")]),_._v(" "),a("p",[_._v("broker 有 3 个配置参数会影响 Kafka 消息存储的可靠性。")]),_._v(" "),a("h3",{attrs:{id:"复制系数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复制系数"}},[_._v("#")]),_._v(" 复制系数")]),_._v(" "),a("p",[a("strong",[a("code",[_._v("replication.factor")]),_._v(" 的作用是设置每个分区的副本数")]),_._v("。"),a("code",[_._v("replication.factor")]),_._v(" 是主题级别配置； "),a("code",[_._v("default.replication.factor")]),_._v(" 是 broker 级别配置。")]),_._v(" "),a("p",[_._v("副本数越多，数据可靠性越高；但由于副本数增多，也会增加同步副本的开销，可能会降低集群的可用性。一般，建议设为 3，这也是 Kafka 的默认值。")]),_._v(" "),a("h3",{attrs:{id:"不完全的选主"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不完全的选主"}},[_._v("#")]),_._v(" 不完全的选主")]),_._v(" "),a("p",[a("code",[_._v("unclean.leader.election.enable")]),_._v(" 是 broker 级别（实际上是集群范围内）配置，默认值为 true。")]),_._v(" "),a("ul",[a("li",[_._v("如果设为 true，代表着"),a("strong",[_._v("允许不同步的副本成为主副本")]),_._v("（即不完全的选举），那么将"),a("strong",[_._v("面临丢失消息的风险")]),_._v("；")]),_._v(" "),a("li",[_._v("如果设为 false，就要"),a("strong",[_._v("等待原先的主副本重新上线")]),_._v("，从而降低了可用性。")])]),_._v(" "),a("h3",{attrs:{id:"最少同步副本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最少同步副本"}},[_._v("#")]),_._v(" 最少同步副本")]),_._v(" "),a("p",[a("strong",[a("code",[_._v("min.insync.replicas")]),_._v(" 控制的是消息至少要被写入到多少个副本才算是“已提交”")]),_._v("。"),a("code",[_._v("min.insync.replicas")]),_._v(" 是主题级别和 broker 级别配置。")]),_._v(" "),a("p",[_._v("尽管可以为一个主题配置 3 个副本，但还是可能会出现只有一个同步副本的情况。如果这个同步副本变为不可用，则必须在可用性和数据一致性之间做出选择。Kafka 中，消息只有被写入到所有的同步副本之后才被认为是已提交的。但如果只有一个同步副本，那么在这个副本不可用时，则数据就会丢失。")]),_._v(" "),a("p",[_._v("如果要确保已经提交的数据被已写入不止一个副本，就需要把最小同步副本的设置为大一点的值。")]),_._v(" "),a("blockquote",[a("p",[_._v("注意：要确保 "),a("code",[_._v("replication.factor")]),_._v(" > "),a("code",[_._v("min.insync.replicas")]),_._v("。如果两者相等，那么只要有一个副本挂机，整个分区就无法正常工作了。我们不仅要改善消息的持久性，防止数据丢失，还要在不降低可用性的基础上完成。推荐设置成 "),a("code",[_._v("replication.factor = min.insync.replicas + 1")]),_._v("。")])]),_._v(" "),a("h2",{attrs:{id:"四、生产者的可靠性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、生产者的可靠性"}},[_._v("#")]),_._v(" 四、生产者的可靠性")]),_._v(" "),a("p",[a("RouterLink",{attrs:{to:"/kafka/kafka-producer.html"}},[_._v("Kafka 生产者")]),_._v(" 中提到了，Kafka 有三种发送方式：同步、异步、异步回调。")],1),_._v(" "),a("p",[_._v("如果使用异步方式发送消息，通常会立即返回，但消息可能丢失。")]),_._v(" "),a("p",[_._v("解决生产者丢失消息：")]),_._v(" "),a("p",[_._v("Producer 使用异步回调方式 "),a("code",[_._v("producer.send(msg, callback)")]),_._v(" 发送消息。callback（回调）能准确地告诉你消息是否真的提交成功了。一旦出现消息提交失败的情况，你就可以有针对性地进行处理。")]),_._v(" "),a("ul",[a("li",[_._v("如果是因为那些瞬时错误，那么仅仅让 Producer 重试就可以了；")]),_._v(" "),a("li",[_._v("如果是消息不合格造成的，那么可以调整消息格式后再次发送。")])]),_._v(" "),a("p",[_._v("然后，需要基于以下几点来保证 Kafka 生产者的可靠性：")]),_._v(" "),a("h3",{attrs:{id:"ack"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ack"}},[_._v("#")]),_._v(" ACK")]),_._v(" "),a("p",[_._v("生产者可选的确认模式有三种："),a("code",[_._v("acks=0")]),_._v("、"),a("code",[_._v("acks=1")]),_._v("、"),a("code",[_._v("acks=all")]),_._v("。")]),_._v(" "),a("p",[a("code",[_._v("acks=0")]),_._v("、"),a("code",[_._v("acks=1")]),_._v(" 都有丢失数据的风险。")]),_._v(" "),a("p",[a("code",[_._v("acks=all")]),_._v(" 意味着会等待所有同步副本都收到消息。再结合 "),a("code",[_._v("min.insync.replicas")]),_._v(" ，就可以决定在得到确认响应前，至少有多少副本能够收到消息。")]),_._v(" "),a("p",[_._v("这是最保险的做法，但也会降低吞吐量。")]),_._v(" "),a("h3",{attrs:{id:"重试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重试"}},[_._v("#")]),_._v(" 重试")]),_._v(" "),a("p",[_._v("如果 broker 返回的错误可以通过"),a("strong",[_._v("重试")]),_._v("来解决，生产者会自动处理这些错误。")]),_._v(" "),a("ul",[a("li",[a("strong",[_._v("可重试错误")]),_._v("，如："),a("code",[_._v("LEADER_NOT_AVAILABLE")]),_._v("，主副本不可用，可能过一段时间，集群就会选举出新的主副本，重试可以解决问题。")]),_._v(" "),a("li",[a("strong",[_._v("不可重试错误")]),_._v("，如："),a("code",[_._v("INVALID_CONFIG")]),_._v("，即使重试，也无法改变配置选项，重试没有意义。")])]),_._v(" "),a("p",[_._v("需要注意的是：有时可能因为网络问题导致没有收到确认，但实际上消息已经写入成功。生产者会认为出现临时故障，重试发送消息，这样就会出现重复记录。所以，尽可能在业务上保证幂等性。")]),_._v(" "),a("p",[_._v("设置 "),a("code",[_._v("retries")]),_._v(" 为一个较大的值。这里的 "),a("code",[_._v("retries")]),_._v(" 同样是 Producer 的参数，对应前面提到的 Producer 自动重试。当出现网络的瞬时抖动时，消息发送可能会失败，此时配置了 retries > 0 的 Producer 能够自动重试消息发送，避免消息丢失。")]),_._v(" "),a("h3",{attrs:{id:"错误处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#错误处理"}},[_._v("#")]),_._v(" 错误处理")]),_._v(" "),a("p",[_._v("开发者需要自行处理的错误：")]),_._v(" "),a("ul",[a("li",[_._v("不可重试的 broker 错误，如消息大小错误、认证错误等；")]),_._v(" "),a("li",[_._v("消息发送前发生的错误，如序列化错误；")]),_._v(" "),a("li",[_._v("生产者达到重试次数上限或消息占用的内存达到上限时发生的错误。")])]),_._v(" "),a("h2",{attrs:{id:"五、消费者的可靠性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、消费者的可靠性"}},[_._v("#")]),_._v(" 五、消费者的可靠性")]),_._v(" "),a("p",[_._v("只有被写入所有同步副本的消息，对消费者才是可用的，这就保证了消费者接收到消息时已经具备了数据一致性。")]),_._v(" "),a("p",[a("strong",[_._v("消费者唯一要做的是确保哪些消息是已经读取过的，哪些是没有读取过的（通过提交的偏移量来判断）")]),_._v("。")]),_._v(" "),a("p",[_._v("如果消费者提交了偏移量却未能处理完消息，那么就有可能造成消息丢失，这也是消费者丢失消息的主要原因。")]),_._v(" "),a("p",[a("img",{attrs:{src:"http://dunwu.test.upcdn.net/snap/20200727140159.png",alt:"img"}})]),_._v(" "),a("h3",{attrs:{id:"消费者的可靠性配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消费者的可靠性配置"}},[_._v("#")]),_._v(" 消费者的可靠性配置")]),_._v(" "),a("ul",[a("li",[a("code",[_._v("group.id")]),_._v(" - 如果希望消费者可以看到主题的所有消息，那么需要为它们设置唯一的 "),a("code",[_._v("group.id")]),_._v("。")]),_._v(" "),a("li",[a("code",[_._v("auto.offset.reset")]),_._v(" - 有两个选项：\n"),a("ul",[a("li",[a("code",[_._v("earliest")]),_._v(" - 消费者会从分区的开始位置读取数据")]),_._v(" "),a("li",[a("code",[_._v("latest")]),_._v(" - 消费者会从分区末尾位置读取数据")])])]),_._v(" "),a("li",[a("code",[_._v("enable.auto.commit")]),_._v(" - 消费者自动提交偏移量。如果设为 true，处理流程更简单，但无法保证重复处理消息。")]),_._v(" "),a("li",[a("code",[_._v("auto.commit.interval.ms")]),_._v(" - 自动提交的频率，默认为每 5 秒提交一次。")])]),_._v(" "),a("h3",{attrs:{id:"显示提交偏移量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#显示提交偏移量"}},[_._v("#")]),_._v(" 显示提交偏移量")]),_._v(" "),a("blockquote",[a("p",[_._v("如果 "),a("code",[_._v("enable.auto.commit")]),_._v(" 设为 true，即自动提交，就无需考虑提交偏移量的问题。")])]),_._v(" "),a("p",[_._v("如果选择显示提交偏移量，需要考虑以下问题：")]),_._v(" "),a("ul",[a("li",[_._v("总是在处理完事件后再提交偏移量")]),_._v(" "),a("li",[_._v("提交频率是性能和重复消息数之间的权衡")]),_._v(" "),a("li",[_._v("确保对提交的偏移量心中有数")]),_._v(" "),a("li",[_._v("再均衡")]),_._v(" "),a("li",[_._v("消费者可能需要重试")]),_._v(" "),a("li",[_._v("消费者可能需要维护状态")]),_._v(" "),a("li",[_._v("长时间处理")]),_._v(" "),a("li",[_._v("幂等性设计")])]),_._v(" "),a("h2",{attrs:{id:"六、验证系统可靠性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、验证系统可靠性"}},[_._v("#")]),_._v(" 六、验证系统可靠性")]),_._v(" "),a("p",[_._v("建议从 3 个层面验证系统的可靠性：")]),_._v(" "),a("ul",[a("li",[a("strong",[_._v("配置验证")])]),_._v(" "),a("li",[a("strong",[_._v("应用验证")]),_._v(" "),a("ul",[a("li",[_._v("客户端和服务器断开连接")]),_._v(" "),a("li",[_._v("选举")]),_._v(" "),a("li",[_._v("依次重启 broker")]),_._v(" "),a("li",[_._v("依次重启生产者")]),_._v(" "),a("li",[_._v("依次重启消费者")])])]),_._v(" "),a("li",[a("strong",[_._v("监控可靠性")]),_._v(" "),a("ul",[a("li",[_._v("对于生产者来说，最重要的两个指标是消息的 "),a("code",[_._v("error-rate")]),_._v(" 和 "),a("code",[_._v("retry-rate")]),_._v("。如果这两个指标上升，说明系统出了问题。")]),_._v(" "),a("li",[_._v("对于消费者来说，最重要的指标是 "),a("code",[_._v("consumer-lag")]),_._v("，该指标表明了消费者的处理速度与最近提交到分区里的偏移量之间还有多少差距。")])])])]),_._v(" "),a("h2",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[_._v("#")]),_._v(" 参考资料")]),_._v(" "),a("ul",[a("li",[a("strong",[_._v("官方")]),_._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://kafka.apache.org/",target:"_blank",rel:"noopener noreferrer"}},[_._v("Kakfa 官网"),a("OutboundLink")],1)]),_._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/apache/kafka",target:"_blank",rel:"noopener noreferrer"}},[_._v("Kakfa Github"),a("OutboundLink")],1)]),_._v(" "),a("li",[a("a",{attrs:{href:"https://kafka.apache.org/documentation/",target:"_blank",rel:"noopener noreferrer"}},[_._v("Kakfa 官方文档"),a("OutboundLink")],1)])])]),_._v(" "),a("li",[a("strong",[_._v("书籍")]),_._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://item.jd.com/12270295.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("《Kafka 权威指南》"),a("OutboundLink")],1)])])]),_._v(" "),a("li",[a("strong",[_._v("教程")]),_._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/apachecn/kafka-doc-zh",target:"_blank",rel:"noopener noreferrer"}},[_._v("Kafka 中文文档"),a("OutboundLink")],1)]),_._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/intro/100029201",target:"_blank",rel:"noopener noreferrer"}},[_._v("Kafka 核心技术与实战"),a("OutboundLink")],1)])])])])])}),[],!1,null,null,null);v.default=t.exports}}]);